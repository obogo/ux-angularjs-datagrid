{"version":3,"sources":["ux-datagrid-expandRows.js"],"names":["exports","global","define","amd","module","ux","datagrid","events","COLLAPSE_ROW","EXPAND_ROW","TOGGLE_ROW","ROW_TRANSITION_COMPLETE","COLLAPSE_ALL_EXPANDED_ROWS","options","expandRows","autoClose","scrollOnExpand","angular","factory","inst","getIndex","itemOrIndex","lastGetIndex","getNormalizedIndex","setup","item","template","templateModel","defaultName","cls","style","swap","throwError","cache","setupTemplates","each","getState","index","opened","name","states","closed","getType","type","toggle","expand","collapse","result","log","opening","setState","immediate","omitIndexes","closeAll","silent","cacheItemData","intIndex","parseInt","rowsLength","indexOf","state","elm","tpl","swapTpl","s","visible","getTemplate","data","getExistingRow","scopes","scope","$state","transition","addEventListener","TRNEND_EV","onTransitionEnd","reverse","makeReverseStyle","css","setTemplate","getRowElm","addClass","evt","target","flow","add","params","reverseStyle","value","key","list","event","util","apply","Object","prototype","hasOwnProperty","element","$index","removeEventListener","removeClass","height","offsetHeight","isNaN","updateHeights","scrollModel","scrollIntoView","dispatch","length","getViewportHeight","getContentHeight","scrollToBottom","isExpanded","getTemplateHeight","superGetTemplateHeight","destroy","logWrapper","dummyStyle","document","createElement","vendor","t","vendors","split","i","l","substr","transitionEnd","","webkit","Moz","O","ms","unwatchers","push","$on","ON_READY","ON_ROW_COMPILE","$s","el","classList","ON_BEFORE_TOGGLE_SORT","ON_BEFORE_DATA_CHANGE","this"],"mappings":"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","file":"ux-datagrid-expandRows.min.js","sourcesContent":["/*!\n* ux-angularjs-datagrid v.1.6.9\n* (c) 2018, Obogo\n* https://github.com/obogo/ux-angularjs-datagrid\n* License: MIT.\n*/\n(function (exports, global) {\nif (typeof define === \"function\" && define.amd) {\n  define(exports);\n} else if (typeof module !== \"undefined\" && module.exports) {\n  module.exports = exports;\n} else {\n  global.ux = exports;\n}\n\nexports.datagrid.events.COLLAPSE_ROW = \"datagrid:collapseRow\";\n\nexports.datagrid.events.EXPAND_ROW = \"datagrid:expandRow\";\n\nexports.datagrid.events.TOGGLE_ROW = \"datagrid:toggleRow\";\n\nexports.datagrid.events.ROW_TRANSITION_COMPLETE = \"datagrid:rowTransitionComplete\";\n\nexports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS = \"datagrid:collapseAllExpandedRows\";\n\nexports.datagrid.options.expandRows = [];\n\nexports.datagrid.options.expandRows.autoClose = true;\n\nexports.datagrid.options.expandRows.scrollOnExpand = true;\n\nangular.module(\"ux\").factory(\"expandRows\", function() {\n    //TODO: on change row template. This needs to collapse the row.\n    return [ \"inst\", function(inst) {\n        var result = exports.logWrapper(\"expandRows\", {}, \"green\", inst), lastGetIndex, cache = {}, opened = {}, opening = false, states = {\n            opened: \"opened\",\n            closed: \"closed\"\n        }, superGetTemplateHeight = inst.templateModel.getTemplateHeight, // transition end lookup.\n        dummyStyle = document.createElement(\"div\").style, vendor = function() {\n            var vendors = \"t,webkitT,MozT,msT,OT\".split(\",\"), t, i = 0, l = vendors.length;\n            for (;i < l; i++) {\n                t = vendors[i] + \"ransform\";\n                if (t in dummyStyle) {\n                    return vendors[i].substr(0, vendors[i].length - 1);\n                }\n            }\n            return false;\n        }(), TRNEND_EV = function() {\n            if (vendor === false) return false;\n            var transitionEnd = {\n                \"\": \"transitionend\",\n                webkit: \"webkitTransitionEnd\",\n                Moz: \"transitionend\",\n                O: \"oTransitionEnd\",\n                ms: \"MSTransitionEnd\"\n            };\n            return transitionEnd[vendor];\n        }();\n        dummyStyle = null;\n        function getIndex(itemOrIndex) {\n            lastGetIndex = typeof itemOrIndex === \"number\" ? itemOrIndex : inst.getNormalizedIndex(itemOrIndex, lastGetIndex);\n            return lastGetIndex;\n        }\n        function setup(item) {\n            item.template = item.template || inst.templateModel.defaultName;\n            if (!item.cls && !item.style && !item.swap) {\n                inst.throwError(\"expandRows will not work without an cls|style|swap property\");\n            }\n            cache[item.template] = item;\n        }\n        function setupTemplates() {\n            ux.each(inst.options.expandRows, setup);\n        }\n        function getState(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return opened[index] && opened[index].name || states.closed;\n        }\n        function getType(type) {\n            return type && type || \"opened\";\n        }\n        function toggle(itemOrIndex, type) {\n            type = getType(type);\n            if (getState(itemOrIndex) !== type) {\n                expand(itemOrIndex, type);\n            } else {\n                collapse(itemOrIndex);\n            }\n        }\n        function expand(itemOrIndex, type) {\n            type = getType(type);\n            var index = getIndex(itemOrIndex);\n            if (getState(index) !== type) {\n                result.log(\"expand %s\", itemOrIndex);\n                // prevent multi-finger expand rows.\n                if (inst.options.expandRows.autoClose && opening) {\n                    return;\n                }\n                opening = true;\n                autoClose([ index ], true);\n                setState(index, type);\n            }\n        }\n        function collapse(itemOrIndex, immediate) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) !== states.closed) {\n                result.log(\"collapse %s\", itemOrIndex);\n                setState(index, states.closed, immediate);\n            }\n        }\n        function autoClose(omitIndexes, immediate) {\n            if (inst.options.expandRows.autoClose) {\n                closeAll(omitIndexes, false, immediate);\n            }\n        }\n        function closeAll(omitIndexes, silent, immediate) {\n            exports.each(opened, function(cacheItemData, index) {\n                var intIndex = parseInt(index, 10);\n                if (!omitIndexes || inst.rowsLength > intIndex && omitIndexes.indexOf(intIndex) === -1) {\n                    if (silent) {\n                        collapse(intIndex, true);\n                        delete opened[index];\n                    } else {\n                        collapse(intIndex, immediate);\n                    }\n                }\n            });\n            opening = false;\n        }\n        function setState(index, state, immediate) {\n            var template = inst.templateModel.getTemplate(inst.data[index], state), elm, tpl, swapTpl, s, visible, swap;\n            if (cache[template.name]) {\n                elm = inst.getExistingRow(index);\n                s = inst.scopes[index];\n                visible = elm && elm.scope() || false;\n                if (!elm || !s) {\n                    // we must be closing a row out of view. possibly destroyed.\n                    delete opened[index];\n                    return;\n                }\n                s.$state = state;\n                tpl = cache[template.name];\n                if (visible && tpl.transition !== false) {\n                    elm[0].addEventListener(TRNEND_EV, onTransitionEnd);\n                }\n                if (tpl.style) {\n                    if (!tpl.reverse) {\n                        tpl.reverse = makeReverseStyle(elm, tpl.style);\n                    }\n                    elm.css(state !== states.closed ? tpl.style : tpl.reverse);\n                }\n                if (tpl.swap && tpl.state !== state) {\n                    swap = typeof tpl.swap === \"function\" ? tpl.swap(inst.data[index], state) : tpl.swap;\n                    swapTpl = cache[swap];\n                    swapTpl.cls = swapTpl.cls || \"\";\n                    inst.templateModel.setTemplate(index, swap, [ swapTpl.cls ]);\n                    elm = inst.getRowElm(index);\n                } else if (tpl.cls) {\n                    elm[state !== states.closed ? \"addClass\" : \"removeClass\"](tpl.cls);\n                    elm.addClass(\"animating\");\n                }\n                // we need to wait for the heights to update before updating positions.\n                var evt = {\n                    target: elm[0],\n                    index: index,\n                    state: state\n                };\n                if (immediate) {\n                    onTransitionEnd(evt, immediate);\n                } else {\n                    inst.flow.add(onTransitionEnd, [ evt ], 0);\n                }\n            } else {\n                inst.throwError(\"unable to toggle template. cls for template '\" + template.name + \"' was not set.\");\n            }\n        }\n        function makeReverseStyle(elm, style) {\n            var params = {\n                elm: elm,\n                style: style,\n                reverse: {}\n            };\n            ux.each(style, reverseStyle, params);\n            return params.reverse;\n        }\n        function reverseStyle(value, key, list, params) {\n            params.reverse[key] = params.elm.css(key);\n        }\n        function onTransitionEnd(event, immediate) {\n            var elm, s, index, state;\n            if (exports.util.apply(Object.prototype.hasOwnProperty, event, [ \"index\" ])) {\n                elm = inst.getRowElm(event.index);\n                index = event.index;\n                state = event.state;\n            } else {\n                elm = angular.element(event.target);\n            }\n            s = elm.scope();\n            if (state && s) {\n                s.$index = index;\n                s.$state = state;\n            } else if (s) {\n                index = s.$index;\n                state = s.$state;\n            }\n            elm[0].removeEventListener(TRNEND_EV, onTransitionEnd);\n            elm.removeClass(\"animating\");\n            if (state !== states.closed) {\n                opened[index] = {\n                    name: state,\n                    index: index,\n                    height: parseInt(elm[0].offsetHeight || 0, 10)\n                };\n                if (isNaN(opened[index].height)) {\n                    inst.throwError(\"Invalid Height\");\n                }\n            } else {\n                delete opened[index];\n            }\n            inst.updateHeights(index);\n            // if opening and collapsing a row at the same time, we don't want to do this twice.\n            if (immediate) {\n                opening = false;\n            } else {\n                // we told the heights to update. Give time for them to change then fire the event.\n                inst.flow.add(function() {\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.scrollModel.scrollIntoView(index, true);\n                    }\n                    inst.dispatch(exports.datagrid.events.ROW_TRANSITION_COMPLETE);\n                    opening = false;\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.flow.add(function() {\n                            // check for last row. On expansion it needs to scroll down.\n                            if (state !== states.closed && index === inst.data.length - 1 && inst.getViewportHeight() < inst.getContentHeight()) {\n                                inst.scrollModel.scrollToBottom(true);\n                            }\n                        }, [], 0);\n                    }\n                }, [], 0);\n            }\n        }\n        function isExpanded(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return !!opened[index];\n        }\n        function getTemplateHeight(item) {\n            var index = getIndex(item);\n            if (opened[index]) {\n                result.log(\"\\texpandRow %s to height %s\", index, opened[index].height);\n                return opened[index].height;\n            }\n            return superGetTemplateHeight(item);\n        }\n        function destroy() {\n            result = null;\n            cache = null;\n            opened = null;\n            states = null;\n        }\n        // override the getTemplateHeight to return the result with the expanded height.\n        inst.templateModel.getTemplateHeight = getTemplateHeight;\n        result.states = states;\n        result.getIndex = getIndex;\n        result.toggle = function(itemOrIndex, type) {\n            inst.flow.add(toggle, [ itemOrIndex, type ]);\n        };\n        result.expand = function(itemOrIndex, type) {\n            inst.flow.add(expand, [ itemOrIndex, type ]);\n        };\n        result.collapse = function(itemOrIndex) {\n            inst.flow.add(collapse, [ itemOrIndex ]);\n        };\n        result.isExpanded = isExpanded;\n        result.getState = getState;\n        result.destroy = destroy;\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_READY, setupTemplates));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.EXPAND_ROW, function(event, itemOrIndex) {\n            result.expand(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ROW, function(event, itemOrIndex) {\n            result.collapse(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.TOGGLE_ROW, function(event, itemOrIndex, type) {\n            result.toggle(itemOrIndex, type);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_ROW_COMPILE, function(event, $s, el) {\n            if (opened[$s.$index]) {\n                var template = inst.templateModel.getTemplate(inst.data[$s.$index]), tpl = cache[template.name];\n                el[0].classList.add(tpl.cls);\n            }\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS, function(event, silent) {\n            closeAll(null, silent);\n        }));\n        if (exports.datagrid.events.ON_BEFORE_TOGGLE_SORT) {\n            inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_TOGGLE_SORT, function(event) {\n                closeAll();\n            }));\n        }\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_DATA_CHANGE, function(event) {\n            closeAll(null, true);\n        }));\n        inst.expandRows = result;\n        return inst;\n    } ];\n});\n}(this.ux = this.ux || {}, function() {return this;}()));\n"]}